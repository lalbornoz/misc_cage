--- tmux-3.1-rc3/cmd-send-keys.c.orig	2020-01-30 10:05:27.000000000 +0100
+++ tmux-3.1-rc3/cmd-send-keys.c	2020-04-05 18:18:30.664903000 +0200
@@ -93,7 +93,11 @@
 	const char		*s = args->argv[i];
 	struct cmdq_item	*new_item;
 	struct utf8_data	*ud, *uc;
+#ifndef __CYGWIN__
 	wchar_t			 wc;
+#else
+	uint32_t		 wc;
+#endif
 	key_code		 key;
 	char			*endptr;
 	long			 n;
--- tmux-3.1-rc3/compat.h.orig	2020-03-17 17:14:12.000000000 +0100
+++ tmux-3.1-rc3/compat.h	2020-04-05 18:18:37.618368200 +0200
@@ -365,9 +365,15 @@
 
 #ifdef HAVE_UTF8PROC
 /* utf8proc.c */
+#ifndef __CYGWIN__
 int		 utf8proc_wcwidth(wchar_t);
 int		 utf8proc_mbtowc(wchar_t *, const char *, size_t);
 int		 utf8proc_wctomb(char *, wchar_t);
+#else
+int		 utf8proc_wcwidth(uint32_t);
+int		 utf8proc_mbtowc(uint32_t *, const char *, size_t);
+int		 utf8proc_wctomb(char *, uint32_t);
+#endif
 #endif
 
 /* getopt.c */
--- tmux-3.1-rc3/compat/utf8proc.c.orig	2019-05-13 10:51:36.000000000 +0200
+++ tmux-3.1-rc3/compat/utf8proc.c	2020-04-05 18:19:49.286498900 +0200
@@ -21,7 +21,11 @@
 #include "compat.h"
 
 int
+#ifndef __CYGWIN__
 utf8proc_wcwidth(wchar_t wc)
+#else
+utf8proc_wcwidth(uint32_t wc)
+#endif
 {
 	int	cat;
 
@@ -37,7 +41,11 @@
 }
 
 int
+#ifndef __CYGWIN__
 utf8proc_mbtowc(wchar_t *pwc, const char *s, size_t n)
+#else
+utf8proc_mbtowc(uint32_t *pwc, const char *s, size_t n)
+#endif
 {
 	utf8proc_ssize_t	slen;
 
@@ -49,13 +57,21 @@
 	 * slen < 0 indicates an error
 	 */
 	slen = utf8proc_iterate(s, n, pwc);
+#ifndef __CYGWIN__
 	if (*pwc == (wchar_t)-1 || slen < 0)
+#else
+	if (*pwc == (uint32_t)-1 || slen < 0)
+#endif
 		return (-1);
 	return (slen);
 }
 
 int
+#ifndef __CYGWIN__
 utf8proc_wctomb(char *s, wchar_t wc)
+#else
+utf8proc_wctomb(char *s, uint32_t wc)
+#endif
 {
 	if (s == NULL)
 		return (0);
--- tmux-3.1-rc3/key-string.c.orig	2020-03-17 17:16:09.000000000 +0100
+++ tmux-3.1-rc3/key-string.c	2020-04-05 18:20:04.080402000 +0200
@@ -166,7 +166,11 @@
 	struct utf8_data	 ud;
 	u_int			 i;
 	enum utf8_state		 more;
+#ifndef __CYGWIN__
 	wchar_t			 wc;
+#else
+	uint32_t		 wc;
+#endif
 
 	/* Is this no key or any key? */
 	if (strcasecmp(string, "None") == 0)
--- tmux-3.1-rc3/tmux.h.orig	2020-03-18 08:54:31.000000000 +0100
+++ tmux-3.1-rc3/tmux.h	2020-04-05 18:20:19.723259600 +0200
@@ -2694,8 +2694,13 @@
 void		 utf8_copy(struct utf8_data *, const struct utf8_data *);
 enum utf8_state	 utf8_open(struct utf8_data *, u_char);
 enum utf8_state	 utf8_append(struct utf8_data *, u_char);
+#ifndef __CYGWIN__
 enum utf8_state	 utf8_combine(const struct utf8_data *, wchar_t *);
 enum utf8_state	 utf8_split(wchar_t, struct utf8_data *);
+#else
+enum utf8_state	 utf8_combine(const struct utf8_data *, uint32_t *);
+enum utf8_state	 utf8_split(uint32_t, struct utf8_data *);
+#endif
 int		 utf8_isvalid(const char *);
 int		 utf8_strvis(char *, const char *, size_t, int);
 int		 utf8_stravis(char **, const char *, int);
--- tmux-3.1-rc3/tty-keys.c.orig	2020-02-20 21:37:59.000000000 +0100
+++ tmux-3.1-rc3/tty-keys.c	2020-04-05 18:20:35.574158500 +0200
@@ -512,7 +512,11 @@
 	struct utf8_data	 ud;
 	enum utf8_state		 more;
 	u_int			 i;
+#ifndef __CYGWIN__
 	wchar_t			 wc;
+#else
+	uint32_t		 wc;
+#endif
 	int			 n;
 
 	log_debug("%s: next key is %zu (%.*s) (expired=%d)", c->name, len,
--- tmux-3.1-rc3/utf8.c.orig	2020-02-19 10:10:16.000000000 +0100
+++ tmux-3.1-rc3/utf8.c	2020-04-05 18:21:33.057539400 +0200
@@ -26,7 +26,11 @@
 
 #include "tmux.h"
 
+#ifndef __CYGWIN__
 static int	utf8_width(wchar_t);
+#else
+static int	utf8_width(uint32_t);
+#endif
 
 /* Set a single character. */
 void
@@ -77,7 +81,11 @@
 enum utf8_state
 utf8_append(struct utf8_data *ud, u_char ch)
 {
+#ifndef __CYGWIN__
 	wchar_t	wc;
+#else
+	uint32_t	wc;
+#endif
 	int	width;
 
 	if (ud->have >= ud->size)
@@ -106,7 +114,11 @@
 
 /* Get width of Unicode character. */
 static int
+#ifndef __CYGWIN__
 utf8_width(wchar_t wc)
+#else
+utf8_width(uint32_t wc)
+#endif
 {
 	int	width;
 
@@ -138,7 +150,11 @@
 
 /* Combine UTF-8 into Unicode. */
 enum utf8_state
+#ifndef __CYGWIN__
 utf8_combine(const struct utf8_data *ud, wchar_t *wc)
+#else
+utf8_combine(const struct utf8_data *ud, uint32_t *wc)
+#endif
 {
 #ifdef HAVE_UTF8PROC
 	switch (utf8proc_mbtowc(wc, ud->data, ud->size)) {
@@ -159,7 +175,11 @@
 
 /* Split Unicode into UTF-8. */
 enum utf8_state
+#ifndef __CYGWIN__
 utf8_split(wchar_t wc, struct utf8_data *ud)
+#else
+utf8_split(uint32_t wc, struct utf8_data *ud)
+#endif
 {
 	char	s[MB_LEN_MAX];
 	int	slen;
